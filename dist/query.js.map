{"version":3,"sources":["../src/query.js"],"names":[],"mappings":"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","file":"query.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\n\nclass DalmatinerQueryCondition {\n  constructor (op, ...args) {\n    this.op = op;\n    this.args = args;\n  }\n\n  and (other) {\n    return new DalmatinerQueryCondition('and', this, other);\n  }\n\n  or (other) {\n    return new DalmatinerQueryCondition('or', this, other);\n  }\n\n  sourceFilter() {\n    if (this.op === 'eq') {\n      var [tag, value] = this.args;\n      if (_.isEqual(tag, [\"dl\", \"source\"])) {\n        return {'enabled': true, value};\n      }\n    }\n    return  {'enabled': false, 'value': ''};\n  }\n\n  toString() {\n    var tag, value, a, b;\n    switch (this.op) {\n    case ('eq'):\n      [tag, value] = this.args;\n      return `${this._encodeTag(tag)} = '${value}'`;\n    case ('present'):\n      [tag] = this.args;\n      return this._encodeTag(tag);\n    case ('and'):\n      [a, b] = this.args;\n      return `${a} AND ${b}`;\n    case ('or'):\n      [a, b] = this.args;\n      return `${a} OR ${b}`;\n    }\n    return '';\n  }\n\n  _encodeTag([ns, key]) {\n    return ns ? `${ns}:'${key}'` : `'${key}'`;\n  }\n}\n\n\nclass DalmatinerFunction {\n  constructor(fun, args, vars) {\n    this.fun = fun;\n    this.args = args;\n    this.vars = vars;\n    this._encodeArg = this._encodeArg.bind(this);\n  }\n\n  toString() {\n    var args = this.args.map(this._encodeArg);\n    return `${this.fun}(${args.join(', ')})`;\n  }\n\n  _encodeArg(arg) {\n    if (typeof arg === 'string' && arg[0] === '$') {\n      let varname = arg.slice(1);\n      arg = this.vars[varname];\n      if (_.isUndefined(arg)) {\n        throw new Error(`Variable ${varname} was not declared`);\n      }\n    }\n    return '' + arg;\n  }\n}\n\n\nclass DalmatinerSelector {\n\n  constructor(collection, metric, variables) {\n    this.collection = collection;\n    this.metric = _.map(metric, function (mpart) {\n      return mpart.value ? mpart.value : mpart.toString();\n    });\n    this.variables = variables;\n  }\n\n  where(condition) {\n    this.condition = condition;\n    return this;\n  }\n\n  // Note: This is a workaround for the fact that we cannot have wildcards as\n  // well as dimensions.  If `dl:source` is part of the predicate criteria,\n  // the query is rewritten to the traditional BUCKET form using the predicate\n  // and avoiding the need for dimension query.\n  toString() {\n    let sourceFilter = this.condition && this.condition.sourceFilter();\n    let metric = this._encodeMetric();\n\n    var str = '';\n\n    if (sourceFilter && sourceFilter.enabled) {\n      let bucket = sourceFilter.value.substring(0, 2);\n      str = `'${sourceFilter.value}'.${metric} BUCKET '${bucket}'`\n    } else {\n      let collection = this._encodeCollection();\n      str = `${metric} IN ${collection}`;\n\n      if (this.condition) {\n        str += ` WHERE ${this.condition}`;\n      }\n    }\n\n    return str;\n  }\n\n  _encodeCollection() {\n    return `'${this.collection}'`;\n  }\n\n  _encodeMetric() {\n    return _.map(this.metric, function(part) {\n      if (part === '*')\n        return '*';\n      else\n        return `'${part}'`;\n    }).join('.');\n  }\n\n}\n\n\nexport class DalmatinerQuery {\n\n  constructor() {\n    this.variables = {};\n    this.parts = [];\n    this.selectors = [];\n  }\n\n  static equals(a, b) {\n    return new DalmatinerQueryCondition('eq', a, b);\n  }\n\n  static present(a) {\n    return new DalmatinerQueryCondition('present', a);\n  }\n\n  /**\n   * Chain-able setters\n   */\n  from(c) {\n    this.collection = c.value ? c.value : c.toString();\n    return this;\n  }\n\n  select(m) {\n    if (! this.collection)\n      throw new Error(\"You need to set collection (from statement) before selecting metric\");\n    var selector = new DalmatinerSelector(this.collection, m);\n    this.selectors.push(selector);\n    this.parts.push(selector);\n    this.active = this.parts.length - 1;\n    return this;\n  }\n\n  beginningAt(t) {\n    this.beginning = moment(t);\n    return this;\n  }\n\n  endingAt(t) {\n    this.ending = moment(t);\n    return this;\n  }\n\n  with(name, value) {\n    this.variables[name] = value;\n    return this;\n  }\n\n  where(condition) {\n    if (! condition instanceof DalmatinerQueryCondition) {\n      throw new Error(\"Invalid query condition\");\n    }\n    this.selectors[this.active].where(condition);\n    return this;\n  }\n\n  apply(fun, args = []) {\n    if (_.isUndefined(this.active))\n      throw new Error(\"You need to select something before you can apply functions\");\n\n    var part = this.parts[this.active],\n        fargs = [part].concat(args),\n        f = new DalmatinerFunction(fun, fargs, this.variables);\n\n    this.parts[this.active] = f;\n    return this;\n  }\n\n  /**\n   * Reading function\n   */\n\n  toString() {\n    return this.toUserString() + ' ' + this._encodeRange();\n  }\n\n  toUserString() {\n    return 'SELECT ' + this.parts.join(', ');\n  }\n\n  /**\n   * Internal methods\n   */\n\n  _encodeRange() {\n    var ending = this.ending.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        duration = Math.round((this.ending - this.beginning) / 1000);\n    return `BEFORE \"${ending}\" FOR ${duration}s`;\n  }\n};\n"]}