{"version":3,"sources":["../src/query.js"],"names":[],"mappings":"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","file":"query.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nfunction _assert(condition, message) {\n  if (! condition) {\n    throw new Error(message);\n  }\n}\n\nclass DalmatinerQueryCondition {\n  constructor (op, ...args) {\n    this.op = op;\n    this.args = args;\n  }\n\n  and (other) {\n    return new DalmatinerQueryCondition('and', this, other);\n  }\n\n  or (other) {\n    return new DalmatinerQueryCondition('or', this, other);\n  }\n\n  toString() {\n    var tag, value, a, b;\n    switch (this.op) {\n    case ('eq'):\n      [tag, value] = this.args;\n      return `${this._encodeTag(tag)} = '${value}'`;\n    case ('neq'):\n      [tag, value] = this.args;\n      return `${this._encodeTag(tag)} != '${value}'`;\n    case ('present'):\n      [tag] = this.args;\n      return this._encodeTag(tag);\n    case ('and'):\n      [a, b] = this.args;\n      return `${a} AND ${b}`;\n    case ('or'):\n      [a, b] = this.args;\n      return `${a} OR ${b}`;\n    }\n    return '';\n  }\n\n  _encodeTag([ns, key]) {\n    return ns ? `${ns}:'${key}'` : `'${key}'`;\n  }\n}\n\nclass DalmatinerProjection {\n  constructor(refId) {\n    this.refId = refId || '';\n  }\n\n  aliasBy(alias) {\n    this.alias = alias;\n    return this;\n  }\n\n  shiftBy(timeshift) {\n    this.timeshift = timeshift;\n    return this;\n  }\n\n  setVisibility(hidden) {\n    this.hidden = hidden;\n    return this;\n  }\n\n  encode() {\n    var str = this.toString();\n    if (this.alias) {\n      str += ` AS ${this.alias}`;\n    }\n    if (this.timeshift) {\n      str += ` SHIFT BY ${this.timeshift}`;\n    }\n    return str;\n  }\n}\n\nclass DalmatinerFunction extends DalmatinerProjection {\n  constructor(fun, args, vars, refId) {\n    super(refId);\n    this.fun = fun;\n    this.args = args;\n    this.vars = vars;\n    this._encodeArg = this._encodeArg.bind(this);\n  }\n\n  toString() {\n    var args = this.args.map(this._encodeArg);\n    return `${this.fun}(${args.join(', ')})`;\n  }\n\n  _encodeArg(arg) {\n    if (typeof arg === 'string' && arg[0] === '$') {\n      let varname = arg.slice(1);\n      arg = this.vars[varname];\n      _assert(!(_.isUndefined(arg)), `Variable ${varname} was not declared`);\n    }\n    return '' + arg;\n  }\n}\n\nclass DalmatinerSelector extends DalmatinerProjection {\n\n  constructor(collection, metric, refId) {\n    super(refId);\n    this.collection = collection;\n    this.metric = _.map(metric, function (mpart) {\n      return mpart.value ? mpart.value : mpart.toString();\n    });\n  }\n\n  where(condition) {\n    this.condition = condition;\n    return this;\n  }\n\n  toString() {\n    var metric = this._encodeMetric(),\n        collection = this._encodeCollection(),\n        str = `${metric} FROM ${collection}`;\n    if (this.condition) {\n      str += ` WHERE ${this.condition}`;\n    }\n    return str;\n  }\n\n  _encodeCollection() {\n    return `'${this.collection}'`;\n  }\n\n  _encodeMetric() {\n    return _.map(this.metric, function(part) {\n      if (part === '*')\n        return `${part}`;\n      else\n        return `'${part}'`;\n    }).join('.');\n  }\n}\n\nexport class DalmatinerQuery {\n\n  constructor() {\n    this.variables = {};\n    this.parts = [];\n    this.selectors = [];\n  }\n\n  static equals(a, b) {\n    return new DalmatinerQueryCondition('eq', a, b);\n  }\n\n  static notEquals(a, b) {\n    return new DalmatinerQueryCondition('neq', a, b);\n  }\n\n  static present(a) {\n    return new DalmatinerQueryCondition('present', a);\n  }\n\n  /**\n   * Chain-able setters\n   */\n  from(c) {\n    this.collection = c.value ? c.value : c.toString();\n    return this;\n  }\n\n  select(m, refId) {\n    _assert(this.collection,\n        \"You need to set collection (from statement) before selecting metric\");\n    var selector = new DalmatinerSelector(this.collection, m, refId);\n    this.selectors.push(selector);\n    this.parts.push(selector);\n    this.active = this.parts.length - 1;\n    return this;\n  }\n\n  beginningAt(t) {\n    this.beginning = moment(t);\n    return this;\n  }\n\n  endingAt(t) {\n    this.ending = moment(t);\n    return this;\n  }\n\n  with(name, value) {\n    this.variables[name] = value;\n    return this;\n  }\n\n  where(condition) {\n    _assert(condition instanceof DalmatinerQueryCondition, \"Invalid query condition\");\n    this.selectors[this.active].where(condition);\n    return this;\n  }\n\n  aliasBy(alias) {\n    this.parts[this.active].aliasBy(alias);\n    return this;\n  }\n\n  shiftBy(timeshift) {\n    this.parts[this.active].shiftBy(timeshift);\n    return this;\n  }\n\n  setVisibility(hidden) {\n    this.parts[this.active].setVisibility(hidden);\n    return this;\n  }\n\n  apply(fun, args = []) {\n    _assert(!(_.isUndefined(this.active)),\n      \"You need to select something before you can apply functions\");\n\n    var part = this.parts[this.active],\n        fargs = [part].concat(args),\n        f = new DalmatinerFunction(fun, fargs, this.variables, part.refId);\n\n    this.parts[this.active] = f;\n    return this;\n  }\n\n  applyToSeries(fun, args = [], refId) {\n    const refIdRegex = /#([A-Z])/;\n\n    _assert(!(_.isUndefined(this.active)),\n      \"You need to select something before you can apply functions\");\n    _assert(refIdRegex.test(_.head(args)), \"Invalid reference for series\");\n\n    var targetRefId = refIdRegex.exec(_.head(args))[1],\n        part = this.parts[this.active],\n        refPart = _.find(this.parts, p => { return p.refId === targetRefId; }),\n        fargs = [],\n        f = null;\n\n    _assert(!(_.isUndefined(refPart)), \"Invalid reference for series\");\n\n    fargs = [part].concat(refPart),\n    f = new DalmatinerFunction(fun, fargs, this.variables, part.refId);\n    this.parts[this.active] = f;\n    return this;\n  }\n\n  /**\n   * Reading function\n   */\n  toString() {\n    if (!this._visibleParts().length)\n      return '';\n    else\n      return this.toUserString() + ' ' + this._encodeRange();\n  }\n\n  toUserString() {\n    return 'SELECT ' + this._encodeProjections().join(', ');\n  }\n\n  /**\n   * Internal methods\n   */\n\n  _encodeRange() {\n    var ending = this.ending.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        duration = Math.round((this.ending - this.beginning) / 1000);\n    return `BEFORE \"${ending}\" FOR ${duration}s`;\n  }\n\n  _encodeProjections() {\n    return this._visibleParts().map(p => { return p.encode(); });\n  }\n\n  _visibleParts() {\n    return _.filter(this.parts, p => {return !p.hidden});\n  }\n};\n"]}