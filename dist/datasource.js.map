{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {DalmatinerQuery} from \"./query\";\n\nconst SERIES = 'Series';\nconst COMBINE = 'Combine';\nconst ARITHMETIC = 'Arithmetic';\nconst AGGREGATE = 'Aggregate';\nconst TRANSFORM = 'Transform';\n\nexport class DalmatinerDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.$q = $q;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.srv = backendSrv;\n    if (instanceSettings.jsonData) {\n      this.authToken = instanceSettings.jsonData.auth ? instanceSettings.jsonData.authToken : null;\n    }\n  }\n\n  /*\n   * Datasource api methods\n   * ---------------------- */\n\n  // used by panels to get data\n  query(options) {\n    var query = this.getQuery(options);\n\n    if (! query)\n      return this.$q.resolve({data: []});\n\n    console.log('Running query: ' + query);\n    return this._request('/?q=' + encodeURIComponent(query))\n      .then(decode_series);\n  }\n\n  // used by datasource configuration page to make sure the connection is working\n  testDatasource() {\n    return this._request('').then(res => {\n      if (res.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n      return undefined;\n    });\n  }\n\n  // get query string\n  getQuery(options) {\n    var {range, interval, targets} = options,\n        q = new DalmatinerQuery(),\n        auto_interval;\n\n    if (targets.length <= 0)\n      return null;\n\n    for (let fields of targets) {\n      if ((fields.collection.value) &&\n          (fields.metric.length > 0))\n        queryFields(q, fields);\n    }\n\n    auto_interval = interval;\n    if (/^[0-9]+s$/.exec(interval) && parseInt(interval) < 30)\n      auto_interval = '30s';\n\n    return q\n      .beginningAt(range.from)\n      .endingAt(range.to)\n      .with('interval', interval)\n      .with('auto', auto_interval)\n      .toString();\n  }\n\n  // get simplified query string that will be displayed when form is collapsed\n  getSimplifiedQuery(target) {\n    var q = new DalmatinerQuery();\n    queryFields(q, target);\n    return q\n      .with('interval', '$interval')\n      .with('auto', '$auto')\n      .toUserString();\n  }\n\n  getCollections() {\n    return this._request('/collections')\n      .then(decodeList);\n  }\n\n  getTagKeys({collection}) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces`)\n      .then((res) => {\n        return this.$q.all(\n          _.reduce(res.data, (acc, ns) => {\n            if (ns === 'label')\n              acc.push({html: 'dl:tag', value: '[\"dl\",\"tag\"]'});\n            else if (ns != 'ddb')\n              acc.push(this.getTagNamespaceKeys({collection}, ns));\n            return acc;\n          }, [])\n        );\n      })\n      .then((keys) => {\n        return _.chain(keys)\n          .flatten()\n          .sortBy(function(i) {return i.html.replace(/^dl:/, '_');})\n          .value();\n      });\n  }\n\n  getTagNamespaceKeys({collection}, namespace) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces/${namespace}/tags`)\n      .then(_.partial(decodeTags, namespace));\n  }\n\n  getTagValues({collection}, tag) {\n    var [namespace, key] = tag;\n    if (namespace == 'dl' && key == 'tag')\n      return this.getLabelTagValues({collection});\n    else\n      return this.getTrueTagValues({collection}, tag);\n  }\n\n  getLabelTagValues({collection}) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces/label/tags`)\n      .then(decodeList);\n  }\n\n  getTrueTagValues({collection}, [namespace, key]){\n    var c = collection.value,\n        p = `/collections/${c}/namespaces/${namespace}/tags/${key}/values`;\n    return this._request(p)\n      .then(decodeList);\n  }\n\n  getMetrics({collection}, prefix = []) {\n    return this._request('/collections/' + collection.value + '/metrics')\n      .then(decodeMetrics)\n      .then(function(root) {\n        var n = root;\n        for (let p of prefix) {\n          n = n.children[p];\n          if (!n) return [];\n        }\n        return _.values(n.children);\n      });\n  }\n\n  getFunctions() {\n    if (this.functionTable) {\n      return this.$q.resolve(this.functionTable);\n    } else {\n      return this._request('/functions')\n        .then(decode_function_table)\n        .then(ft => {\n          this.functionTable = ft;\n          return ft;\n        });\n    }\n  }\n\n  /*\n   * Internal methods\n   */\n\n  _request(path) {\n    var headers = {Accept: 'application/json'},\n        options = {method: 'GET', url: this.url + path, headers};\n    if (this.authToken) {\n      let sep = path.indexOf('?') >= 0 ? '&' : '?';\n      path += `${sep}token=${this.authToken}`;\n    }\n    return this.srv.datasourceRequest({method: 'GET', url: this.url + path, headers});\n  }\n};\n\n\n// Decode data coming from Dalmatiner\nfunction decode_series(res) {\n  var {s, d} = res.data,\n      start = s * 1000;\n  return {data: (d || []).map(({n, v, r}) => {\n    return {\n      target: n.replace(/'/g, \"\"),\n      datapoints: timestampPoints(v, start, r)\n    };\n  })};\n}\n\nfunction decode_function_table(res) {\n\n  let funTable = flatMap(res.data, fun => {\n    if (fun.combiner_type !== 'none') {\n      return [\n        {category: COMBINE, name: fun.name, fun: fun.name, spec: []},\n        {category: SERIES, name: fun.name, fun: fun.name, spec: [{type: 'text', default: '#A'}]}\n      ];\n    } else if (_.isEqual(fun.signature, ['metric'])) {\n      return {category: TRANSFORM, name: fun.name, fun: fun.name, spec: []};\n    } else if (_.isEqual(fun.signature, ['metric', 'time'])) {\n      return {category: AGGREGATE, name: fun.name, fun: fun.name, spec: [{type: 'time', default: '$interval'}]};\n    } else {\n      return {category: ARITHMETIC, name: fun.name, fun: fun.name, spec: [{type: 'number', default: '1'}]};\n    }\n  });\n\n  let comparator = x => {\n    return `${x.category}_${x.name}`;\n  }\n\n  return _.sortBy(_.uniq(funTable, comparator, this), ['category', 'name']);\n}\n\nfunction timestampPoints(values, start, increment) {\n  var r = new Array(values.length);\n  for (var i = 0; i < values.length; i++) {\n    r[i] = [values[i], start + (i * increment)];\n  }\n  return r;\n}\n\nfunction decodeList(res) {\n  return _.map(res.data, function (item) {\n    if (item === '') {\n      return {value: '--empty--', html: '-- empty --'};\n    } else if (typeof item == 'string')\n      return {value: item, html: item};\n    else\n      return {value: item.key, html: item.label};\n  });\n}\n\nfunction decodeMetrics(res) {\n  var root = {children: {}};\n\n  for (let {key, parts} of res.data) {\n    let n = root;\n    for (let part of parts) {\n      if (! n.children[part]) {\n        n.children[part] = {\n          value: part,\n          html: part,\n          children: {}\n        };\n      }\n      n = n.children[part];\n    }\n  }\n  return root;\n}\n\nfunction decodeTags(ns, res) {\n  return _.map(res.data, function (tag) {\n    return {\n      html: (ns == '') ? tag : `${ns}:${tag}`,\n      value: JSON.stringify([ns, tag])};\n  });\n}\n\nfunction queryFields(q, fields) {\n  q.from(fields.collection)\n   .select(fields.metric, fields.refId);\n\n  if (! _.isEmpty(fields.tags)) {\n    q.where(buildCondition(fields.tags));\n  }\n  _.each(fields.functions, function (fn) {\n    if (fn.category === SERIES) {\n      q.applyToSeries(fn.fun || fn.name, fn.args, fields.refId);\n    } else {\n      q.apply(fn.fun || fn.name, fn.args, fields.refId);\n    }\n  });\n\n  if (! _.isEmpty(fields.alias)) {\n    q.aliasBy(fields.alias);\n  }\n\n  if (! _.isEmpty(fields.timeshift)) {\n    q.shiftBy(fields.timeshift);\n  }\n\n  if (_.isBoolean(fields.hide)) {\n    q.setVisibility(fields.hide);\n  }\n\n  return q;\n}\n\nfunction buildCondition(tokens) {\n  var stack = [],\n      condition;\n\n  // First run is to expand all operators, leaving only condition objects and\n  // condition keywords left on stack\n  for (let token of tokens) {\n    if (token.type === 'value') {\n      let operator = stack.pop(),\n          key = stack.pop(),\n          c, v;\n      assert(operator.type === 'operator', \"Expected operator, but got: \" + operator.type);\n      assert(key.type === 'key', \"Expected token key, but got: \" + key.type);\n      if (token.fake) {\n        c = null;\n      } else if (key.value == '[\"dl\",\"tag\"]') {\n        c = DalmatinerQuery.present(['label', token.value]);\n      } else if (operator.value === \"!=\") {\n        v = token.value;\n        c = DalmatinerQuery.notEquals(JSON.parse(key.value), v);\n      } else {\n        v = token.value === '--empty--' ? v = '' : v = token.value;\n        c = DalmatinerQuery.equals(JSON.parse(key.value), v);\n      }\n      stack.push(c);\n    } else {\n      stack.push(token);\n    }\n  }\n\n  // Now we iterate through stack to combine all conditions joining them by\n  // keyword\n  condition = stack.shift();\n  while (stack.length) {\n    let kwd = stack.shift(),\n        c = stack.shift();\n    if (condition === null) {\n      continue;\n    }\n    assert(kwd.type === 'condition', \"Expected condition keyword, but got: \" + JSON.stringify(c));\n    if (c === null)\n      continue;\n    switch (kwd.value) {\n    case('AND'):\n      condition = condition.and(c);\n      break;\n    case('OR'):\n      condition = condition.or(c);\n      break;\n    default:\n      throw new Error('Unexpected condition keyword: ' + kwd.value);\n    }\n  }\n\n  return condition;\n}\n\nfunction assert(condition, message) {\n  if (! condition) {\n    throw new Error(message);\n  }\n}\n\nfunction flatMap(col, f) {\n  return _.chain(col).map(f).flatten().value();\n}\n"]}